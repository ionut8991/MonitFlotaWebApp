@page
@model MapModel
@{
    ViewData["Title"] = "Map";
}

<h2>Route Map</h2>
<div id="map" style="width: 100%; height: 500px;"></div>

<!-- Include Leaflet CSS and JavaScript -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>

<script>
    // Initialize the map
    var map = L.map('map').setView([44.9144, 26.0365], 12); // Center at default coordinates

    // Add a base map layer
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 18,
    }).addTo(map);

    // Fetch route data from the backend API
    fetch('/Map/GetRouteData')
        .then(response => response.json())
        .then(data => {
            data.routes.forEach(route => {
                route.steps.forEach(step => {
                    let lat = step.location[1];
                    let lng = step.location[0];
                    L.marker([lat, lng]).addTo(map)
                        .bindPopup(`Step ID: ${step.id}, Distance: ${step.distance} m`);
                });

                let polylinePoints = decodePolyline(route.geometry);
                L.polyline(polylinePoints, { color: 'blue' }).addTo(map);
            });
        });

    // Polyline decoding function
    function decodePolyline(encoded) {
        let points = [];
        let index = 0, lat = 0, lng = 0;
        while (index < encoded.length) {
            let shift = 0, result = 0, b;
            do {
                b = encoded.charCodeAt(index++) - 63;
                result |= (b & 0x1f) << shift;
                shift += 5;
            } while (b >= 0x20);
            let dlat = ((result & 1) ? ~(result >> 1) : (result >> 1));
            lat += dlat;
            shift = 0;
            result = 0;
            do {
                b = encoded.charCodeAt(index++) - 63;
                result |= (b & 0x1f) << shift;
                shift += 5;
            } while (b >= 0x20);
            let dlng = ((result & 1) ? ~(result >> 1) : (result >> 1));
            lng += dlng;
            points.push([lat / 1E5, lng / 1E5]);
        }
        return points;
    }
</script>
